#summary Reunión de arquitectura
#labels ARQUITECTURA

= Reunión de Arquitectura 02-03-2007 =

== Participantes ==
Esteban Calabria

Javier Feldman

Nacho

Francisco Heker

Martín Viegas

Gustavo Ortiz

== Temario de la reunión ==
  * Seguridad: usuarios, permisos funcionales, permisos sobre la información.
  * Prototipo: comenzar con el relevamiento de un prototipo que pruebe la interfaz de usuario, modelo de negocios y la base de datos, utilizando el framework MVC y N-Hibernate.
  * Claves primarias.
  * Opciones por defecto - parametrización particular: como tener predefinido para todo las opciones por defecto más usuales y tener disponible la parametrización particular para los usuarios que lo requieran. Rapidez y sencillez - Flexibilidad y amplitud.
  * Mantenimiento de la consistencia de la información histórica ante los cambios en las características esenciales de un objeto a lo largo del tiempo. Ejemplo: un artículo que no trabajó con lotes y pasa en determinado momento a trabajar, esto suele traer inconsistencia en el stock.
  * Autorizaciones y estados de las transacciones
  * Manejo de estructuras jerárquicas (árboles): como presentar rápidamente descripciones que tienen que armarse recorriendo estructuras de árbol, etc.
  * Campos adicionales: para comenzar con artículos.
  * Manejo de una registry propia para guardar últimas configuraciones

== Temas tratados ==
  # Prototipo
    * Se habla sobre la conveniencia de desarrollar un prototipo simple donde se puedan probar todas las cuestiones relacionadas con la arquitectura. La idea es integrar en el prototipo la capa de usuario, la capa de negocios y la capa de base de datos implementando un modelo de clases.
    * Se piensa en un modelo de clases simples para que sea fácil de implementar y de diseñar las pruebas y que al mismo tiempo tenga el alcance suficiente para poder evaluar todos los temas necesarios.
    * En lugar de utilizar clases abstractas (como clase_a, clase_b, etc.) se utilizarán clases significativas del dominio en el que nos ocuparemos. Se aclara que estas clases 
no pretenden representar una solución real del dominio, sólo sirven para probar la arquitectura y con clase más significativo, claras y comprensibles, lo que va a facilitar analizar los resultados.
    * El modelo será el siguiente:
      * Clase ARTICULO
        * Propiedades: CODIGO: string, NOMBRE: string.
      * Clase DEPOSITO
        * Propiedades: CODIGO: string, NOMBRE: string.
      * Clase STOCK
        * Propiedades: ARTICULO: articulo, DEPOSITO: deposito, CANTIDAD: float.
      * Clase ITEM_MOVIMIENTO_DE_INVENTARIO
        * Propiedades: ARTICULO: articulo, DEPOSITO_ENTRADA: deposito, DEPOSITO_SALIDA: deposito, CANTIDAD: float.
      * Clase ITEMS_MOVIMIENTO_DE_INVENTARIO
        * Propiedades: COLECCION DE item_movimiento_de_inventario.
      * Clase MOVIMIENTO_DE_INVENTARIO
        * Propiedades: NUMERO: integer, ITEMS_MOVIMIENTO_DE_INVENTARIO: items_movimiento_de_inventario.
    * Lo que se pretende evaluar en una primer iteración es lo siguiente:
      * Interfaz de usuario. Uso de WinForm y de WebForm. Determinar si es conveniente el uso de WebForm en todo el sistema. Se presume que para la mayor parte de las funcionalidades los WinForms serán más aptos para los usuarios de un ERP que los WebForms.
      * Probar el uso del framework MVC Spring para separar y conectar la capa de interfaz con el modelo de negocios. Evaluarlo.
      * Probar el uso del framework de persistencia NHibernate para separar y conectar el modelo de negocios de la capa de base de datos.
      * Analizar, probar y evaluar distintas formas de realizar consultas sobre la información y la forma de presentarla al usuario.
      * Lista de [CaracteristicasNoFuncionalesERP características no funcionales del ERP]. Ver cuáles se pueden ir evaluando sobre el prototipo o cómo tenerlas en cuenta para el desarrollo de prototipo.
    * Las funcionalidades que tendrá el prototipo para poder realizar las pruebas de arquitectura serán:
      * ABM de artículos
      * ABM de depósitos
      * Transacción de Movimiento de inventario
      * Consultas: artículos, depósitos, stock, movimientos de inventario.
    * Se decide también desarrollar el prototipo dentro de la capacitación en C#.
  * Claves primarias
    * Se habla sobre la conveniencia de utilizar GUID, para resolver conflictos de replicación. Hay que ver cómo lo maneja el framework de persistencia. El tema está en debate y se puede probar en el prototipo.
  * Manejo de una registry interna
    * Todos coinciden en que las opciones de configuración, opciones por defecto, que tienen que ver con las preferencias del su usuario sobre su interfaz gráfica en conveniente guardarlas internamente en el sistema.
  * Opciones por defecto - parametrización particular
    * Se habló en particular sobre esta necesidad no funcional para que sea tenida en cuenta por la arquitectura del sistema. El sistema tiene que ser por un lado muy flexible ya que no está dirigido a ninguna empresa en particular si no a la gestión de cualquier emmpresa. Por lo cual la flexibilidad y adaptabilidad es un requisito para el éxito comercial del producto. Este requisito se contrapone con otro que demanda simplicidad y facilidad de uso del sistema. Que un usuario sólo tenga que utilizar (ver, configurar, interactuar) con aquellos datos y parámetros que necesita, sin verse obligado a configurar infinidad de parámetros y variables que no le interesan. Para esto se menciona como posible camino de solución manejar inteligentemente las opciones por defecto, de la parametrización particular (demandada específicamente por un usuario), tanto en la predefinición interna del sistema como en su presentación gráfica.

== Temas pendientes ==
  * Seguridad: usuarios, permisos funcionales, permisos sobre la información.
  * Mantenimiento de la consistencia de la información histórica ante los cambios en las características esenciales de un objeto a lo largo del tiempo. Ejemplo: un artículo que no trabajó con lotes y pasa en determinado momento a trabajar, esto suele traer inconsistencia en el stock.
  * Autorizaciones y estados de las transacciones
  * Manejo de estructuras jerárquicas (árboles): como presentar rápidamente descripciones que tienen que armarse recorriendo estructuras de árbol, etc.
  * Campos adicionales.

== Resoluciones adoptadas ==
  # Realización de un prototipo para prueba de la arquitectura del sistema.
  # Modelo de clases del prototipo
  # Utilización del framework Spring y NHibernate en el prototipo para su estudio y evaluación.
  # Desarrollar el prototipo como parte de la capacitación en C#. También nos estaremos capacitando en Spring y NHibernate.
  # Guardar internamente en el sistema las preferencias del usuario (registry propia).

== Próxima reunión ==
Sin definir próxima reunión de arquitectura
Se define capacitación para el sábado 17 de marzo de 2007 en La Plata de 9:00 hasta las ...