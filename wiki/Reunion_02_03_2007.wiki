#summary Reunión de arquitectura
#labels ARQUITECTURA

= Reunión de Arquitectura 02-03-2007 =

== Participantes ==
Esteban Calabria

Javier Feldman

Nacho

Francisco Heker

Martín Viegas

Gustavo Ortiz

== Temario de la reunión ==
  * Seguridad: usuarios, permisos funcionales, permisos sobre la información.
  * Prototipo: comenzar con el relevamiento de un prototipo que pruebe la interfaz de usuario, modelo de negocios y la base de datos, utilizando el framework MVC y N-Hibernate.
  * Claves primarias.
  * Opciones por defecto - parametrización particular: como tener predefinido para todo las opciones por defecto más usuales y tener disponible la parametrización particular para los usuarios que lo requieran. Rapidez y sencillez - Flexibilidad y amplitud.
  * Mantenimiento de la consistencia de la información histórica ante los cambios en las características esenciales de un objeto a lo largo del tiempo. Ejemplo: un artículo que no trabajó con lotes y pasa en determinado momento a trabajar, esto suele traer inconsistencia en el stock.
  * Autorizaciones y estados de las transacciones
  * Manejo de estructuras jerárquicas (árboles): como presentar rápidamente descripciones que tienen que armarse recorriendo estructuras de árbol, etc.
  * Campos adicionales: para comenzar con artículos.
  * Manejo de una registry propia para guardar últimas configuraciones

== Temas tratados ==
  # Prototipo
    * Se habla sobre la conveniencia de desarrollar un prototipo simple donde se puedan probar todas las cuestiones relacionadas con la arquitectura. La idea es integrar en el prototipo la capa de usuario, la capa de negocios y la capa de base de datos implementando un modelo de clases.
    * Se piensa en un modelo de clases simples para que sea fácil de implementar y de diseñar las pruebas y que al mismo tiempo tenga el alcance suficiente para poder evaluar todos los temas necesarios.
    * En lugar de utilizar clases abstractas (como clase_a, clase_b, etc.) se utilizarán clases significativas del dominio en el que nos ocuparemos. Se aclara que estas clases 
_no pretenden representar una solución real del dominio_, sólo sirven para probar la arquitectura y con clase más significativo, claras y comprensibles, lo que va a facilitar analizar los resultados.
    * El modelo será el siguiente:
      * Clase ARTICULO
        * Propiedades: CODIGO: string, NOMBRE: string.
      * Clase DEPOSITO
        * Propiedades: CODIGO: string, NOMBRE: string.
      * Clase STOCK
        * Propiedades: ARTICULO: articulo, DEPOSITO: deposito, CANTIDAD: float.
      * Clase ITEM_MOVIMIENTO_DE_INVENTARIO
        * Propiedades: ARTICULO: articulo, DEPOSITO_ENTRADA: deposito, DEPOSITO_SALIDA: deposito, CANTIDAD: float.
      * Clase ITEMS_MOVIMIENTO_DE_INVENTARIO
        * Propiedades: COLECCION DE item_movimiento_de_inventario.
      * Clase MOVIMIENTO_DE_INVENTARIO
        * Propiedades: NUMERO: integer, ITEMS_MOVIMIENTO_DE_INVENTARIO: items_movimiento_de_inventario.
    * Lo que se pretende evaluar en una primer iteración es lo siguiente:
      * Interfaz de usuario. Uso de WinForm y de WebForm. Determinar si es conveniente el uso de WebForm en todo el sistema. Se presume que para la mayor parte de las funcionalidades los WinForms serán más aptos para los usuarios de un ERP que los WebForms.
      * Probar el uso del framework MVC Spring para separar y conectar la capa de interfaz con el modelo de negocios. Evaluarlo.
      * Probar el uso del framework de persistencia NHibernate para separar y conectar el modelo de negocios de la capa de base de datos.


Se desarrollarán ciertas funcionalidades mínimas para probar distintos tipos de interfaz de usuario (WinForm, WebForm) y e

  # Claves primarias
    * Detalle
  # Manejo de una registry interna
    * Detalle
  # Opciones por defecto - parametrización particular

== Temas pendientes ==
  # Tema 2

== Resoluciones adoptadas ==
  # Descripción
  # Descripción

== Próxima reunión ==
dd-mm-aaaa