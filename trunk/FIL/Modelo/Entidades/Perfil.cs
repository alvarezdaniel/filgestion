///////////////////////////////////////////////////////////
//  Perfil.cs
//  Implementation of the Class Perfil
//  Generated by Enterprise Architect
//  Created on:      05-Jul-2007 09:07:02
///////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using NHibernate;
using Iesi.Collections;
using Fil.Modelo.Enumerados;
using Fil.Modelo.Helpers;

namespace Fil.Modelo.Entidades 
{

	public class Perfil: IEntidadPersistible
  {

    internal const string SUPERPERFIL_NOMBRE = "__superperfil__sistemas";

#region Campos Privados

    private string id = null;
    private string descripcion;
    private ISet accionesAsociadas = new HashedSet();
    private int autonumerico;

#endregion

#region Constructores

    /// <summary>
    /// Constructor sin parámetros necesario para NHibernate
    /// </summary>
    protected Perfil() { }

    /// <summary>
    /// Constructor público de la clase
    /// </summary>
    /// <param name="pDescripcion">descripcion del perfil</param>
    public Perfil(string pDescripcion)
    {
      this.Descripcion = pDescripcion;
    }

#endregion

#region Propiedades

    /// <summary>
    /// Identificador del perfil
    /// </summary>
    public virtual string Id
    {
      get { return id; }
    }

    /// <summary>
    /// Código autonumerico
    /// </summary>
    public virtual int Autonumerico
    {
      get { return autonumerico; }
      set { autonumerico = value; }
    }

    /// <summary>
    /// Descripcion o nombre representativo
    /// </summary>
    public virtual string Descripcion
    {
      get { return descripcion; }
      set { descripcion = value; }
    }

    /// <summary>
    /// Coleccion de acciones asociadas al perfil
    /// </summary>
    protected virtual ISet AccionesAsociadas
    {
      get { return accionesAsociadas; }
      set { accionesAsociadas = value; }
    }

    /// <summary>
    /// Devuelve una lista con las acciones q tiene asociadas el perfil
    /// </summary>
    /// <remarks>
    /// No se utiliza para agregar o eliminar acciones, para eso estan los métodos
    /// AgregarAccion y QuitarAccion
    /// </remarks>
    public virtual IList Acciones
    {
      get
      {
        IList axns = new ArrayList();
        foreach (AccionAsociada aa in AccionesAsociadas)
        {
          axns.Add(aa.Accion);
        }
        return axns;
      }
    }

#endregion

#region Métodos Públicos

    /// <summary>
    /// Verifica si el perfil puede realizar una determinada accion
    /// </summary>
    /// <param name="accion">Accion a verificar</param>
    public virtual bool Puede(Accion pAccion)
    {
      //Cualquier perfil puede realizar la accion nula
      if (pAccion == Accion.AccionNula)
        return true;
      return this.Acciones.Contains(pAccion);
    }
    /// <summary>
    /// Guarda la instancia en la base de datos
    /// </summary>
    public virtual void Guardar()
    {
      PerfilHelper.Guardar(this);
    }
    /// <summary>
    /// Elimina la instancia de la base de datos
    /// </summary>
    public virtual void Eliminar()
    {
      PerfilHelper.Eliminar(this);
    }
    /// <summary>
    /// Agrega una accion a la coleccion de acciones asociadas
    /// </summary>
    /// <param name="pAccion">Accion a agregar</param>
    public virtual void AgregarAccion(Accion pAccion)
    {
      if (!this.Acciones.Contains(pAccion))
      {
        AccionAsociada aux = new AccionAsociada(pAccion);
        AccionesAsociadas.Add(aux);
      }
    }
    /// <summary>
    /// Quita una accion de la coleccion de acciones asociadas
    /// </summary>
    /// <param name="pAccion">Accion a quitar</param>
    public virtual void QuitarAccion(Accion pAccion)
    {
      if (this.Acciones.Contains(pAccion))
      {
        AccionAsociada aux = null;
        foreach (AccionAsociada aa in AccionesAsociadas)
        {
          if (aa.Accion.Equals(pAccion))
            aux = aa;
        }
        AccionesAsociadas.Remove(aux);
      }
    }

    public override bool Equals(object obj)
    {
      //Primero verifico si el objeto es de tipo perfil o hereda de perfil (es necesario
      //porque nhibernate genera RuntimeTypes que heredan de las clases persistentes, para 
      //manejar la instanciacion perezosa
      if ((obj.GetType() != typeof(Perfil)) && (obj.GetType().BaseType != typeof(Perfil)))
        return false;
      //Si es de tipo perfil, verifico el Id.
      return ((Perfil)obj).Id == this.Id;
    }
    public override string ToString()
    {
      return this.Descripcion;
    }
    public override int GetHashCode()
    {
      return base.GetHashCode();
    }

#endregion

  }//end Perfil

}//end namespace Entidades